# overall range is 0d to 180d (20 to 160 actually?)
# valence {positive, negative} each represented by a range over posture
#		positive: {80, 140} center at 110
#		negative: {40, 100} center at 70
# intensity {strong, weak} represented by more or less exaggerated motions
#		strong: +20%
#		weak: 	-20%

# actuator ranges

# constants. MOV_RANGE is base number of degrees of a movement. modulated by intensity

PRP_MAX = 180.0
PRP_MIN = 0.0

POS_VAL = 120.0 #(80.0, 180.0)
NEG_VAL = 60.0  #(0.0, 100.0)
NEU_VAL = 90.0  #(40.0, 140.0)

STRONG_INT	= 1.2
WEAK_INT	= 0.8

MOV_RANGE = (PRP_MAX - POS_VAL)/1.2

# (pan, tilt, roll bop), neutral values
default_pos = (90.0, 90.0, 90.0, 0.0)
current_pos = (90.0, 90.0, 90.0, 0.0)

# primitive action list:

# current_pos is always a 4-element vector representing absolute
# positions for all DoF

def goto_resting(valence):
	center = valence/2
	current_pos = (center, center, center, 0.0)
	return current_pos

def ac_lookup(valence, intensity):
	center = valence/2
	tilt_range = MOV_RANGE*intensity
	current_pos[1] = center + tilt_range
	return current_pos

def ac_lookdown(valence, intensity):
	center = valence/2
	tilt_range = MOV_RANGE*intensity
	current_pos[1] = center - tilt_range
	return current_pos

def ac_lookleft(valence, intensity):
	center = valence/2
	pan_range = MOV_RANGE*intensity
	current_pos[0] = center - pan_range
	return current_pos

def ac_lookright(valence, intensity):
	center = valence/2
	pan_range = MOV_RANGE*intensity
	current_pos[0] = center + pan_range
	return current_pos

def ac_lieleft(valence, intensity):
	center = valence/2
	roll_range = MOV_RANGE*intensity
	current_pos[2] = center - roll_range
	return current_pos

def ac_lieright(valence, intensity):
	center = valence/2
	roll_range = MOV_RANGE*intensity
	current_pos[2] = center + roll_range
	return current_pos

def ac_bopup():
	current_pos[3] = 1
	return current_pos

def ac_bopdown():
	current_pos[3] = -1
	return current_pos



